---
- name: config first master node of k8s
  hosts: master1
  become: true
  
  tasks:

    - name: kubeadm config
      copy:
        dest: /opt/kubeadm_config.yml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          bootstrapTokens:
          - groups:
            - system:bootstrappers:kubeadm:default-node-token
            token: abcdef.0123456789abcdef
            ttl: 24h0m0s
            usages:
            - signing
            - authentication
          kind: InitConfiguration
          localAPIEndpoint:
            advertiseAddress: ${master1_ip}
            bindPort: 6443
          nodeRegistration:
            criSocket: unix:///var/run/containerd/containerd.sock
            imagePullPolicy: IfNotPresent
            name: ${master1_name}
            taints:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
          ---
          apiServer:
            timeoutForControlPlane: 4m0s
            extraArgs:
              authorization-mode: "Node,RBAC"
            certSANs:
              - "${vip_ip}"
              - "${master1_ip}"
              - "${master2_ip}"
              - "${master3_ip}"
              - "${master1_name}"
              - "${master2_name}"
              - "${master3_name}"
              - "${vip_api_name}"
              - "${vip_api_name}.${domain_name}"
              - "${master1_name}.${domain_name}"
              - "${master2_name}.${domain_name}"
              - "${master3_name}.${domain_name}"
          apiVersion: kubeadm.k8s.io/v1beta3
          certificatesDir: /etc/kubernetes/pki
          clusterName: kubernetes
          etcd:
            local:
              imageRepository: "quay.io/coreos"
              imageTag: "v3.5.9"
              dataDir: "/var/lib/etcd"
              serverCertSANs:
                - "${master1_ip}"
                - "${master2_ip}"
                - "${master3_ip}"
                - "${vip_ip}"
                - "${master1_name}"
                - "${master2_name}"
                - "${master3_name}"
                - "${vip_api_name}"
                - "${vip_api_name}.${domain_name}"
                - "${master1_name}.${domain_name}"
                - "${master2_name}.${domain_name}"
                - "${master3_name}.${domain_name}"
              peerCertSANs:
                - "${master1_ip}"
                - "${master2_ip}"
                - "${master3_ip}"
                - "${vip_ip}"
                - "${master1_name}"
                - "${master2_name}"
                - "${master3_name}"
                - "${vip_api_name}"
                - "${vip_api_name}.${domain_name}"
                - "${master1_name}.${domain_name}"
                - "${master2_name}.${domain_name}"
                - "${master3_name}.${domain_name}"
          imageRepository: registry.k8s.io
          kind: ClusterConfiguration
          kubernetesVersion: 1.30.5
          controlPlaneEndpoint: "${vip_api_name}.${domain_name}:6443"
          networking:
            dnsDomain: cluster.local
            serviceSubnet: "10.233.0.0/18"
            podSubnet: "10.233.64.0/18"
          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: systemd
        mode: '0644'

    - name: Pull Kubernetes control plane images
      command: kubeadm config images pull --config /opt/kubeadm_config.yml

    - name: Initialize the Kubernetes control plane
      command: kubeadm init --config /opt/kubeadm_config.yml
    - name: Create .kube directory for the current user
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy Kubernetes admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Set correct ownership for .kube/config
      file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Install bash-completion
      apt:
        name: bash-completion
        state: present
        update_cache: yes

    - name: Enable kubectl autocompletion in user's bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'source <(kubectl completion bash)'
        create: yes
        insertafter: EOF

    - name: Generate kubectl bash completion script
      command: kubectl completion bash
      register: kubectl_completion_output

    - name: Save kubectl completion to /etc/bash_completion.d/kubectl
      copy:
        content: "{{ kubectl_completion_output.stdout }}"
        dest: /etc/bash_completion.d/kubectl
        owner: root
        group: root
        mode: '0644'

    - name: Add kubectl alias to bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'alias k=kubectl'
        create: yes
        insertafter: EOF

    - name: Add kubectl alias autocompletion to bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'complete -F __start_kubectl k'
        create: yes
        insertafter: EOF

    - name: Enable kubeadm autocompletion in user's bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'source <(kubeadm completion bash)'
        create: yes
        insertafter: EOF

    - name: Generate kubeadm bash completion script
      command: kubeadm completion bash
      register: kubeadm_completion_output

    - name: Save kubeadm completion to /etc/bash_completion.d/kubeadm
      copy:
        content: "{{ kubeadm_completion_output.stdout }}"
        dest: /etc/bash_completion.d/kubeadm
        owner: root
        group: root
        mode: '0644'

